#This script write synonyms and noted names into the main eflora_taxa field
#A lot of the script is written to avoid duplication
#because the same name can be a synonym and noted, or noted and an accepted name, etc.
#(most names in the NOTES fields are accepted names)
#So the script first loads all accepted names into an array
#then prints out the synonyms, skipping any that match accepted names or previously listed synonyms
#then prints out the noted names, skipping any that match accepted names
#We allow noted names to appear multiple times in the search results, under different names
#But if a name is under both SYNONYMS and NOTE in the same entry, it is recorded as a synonym

use BerkeleyDB;
#use lib "/JEPS-master/Jepson-eFlora/Modules/";
use lib '/Users/Shared/Jepson-Master/Jepson-eFlora/Modules';
use CCH;


$todayJD = &CCH::get_today_julian_day;
$log_file = 'output/eflora_log'.$todayJD.'.txt';
	open(LOG, '>>', $log_file);

my $urlroot = "/Users/Shared/Jepson-Master";
my $diskroot = "/Volumes/BIM/JEPS-master";

#Load master taxon list for taxon ID matching
open(IN, "/Users/Shared/Jepson-Master/Jepson-eFlora/synonymy/input/smasch_taxon_ids.txt") || die;
while(<IN>){
	chomp;
	#s/X /&times;/;
	($smasch_code,$smasch_name,@residue)=split(/\t/);
	$TID{$smasch_name}=$smasch_code;
	$TNOAN{$smasch_code}=$smasch_name;
}
close(IN);

#Load accepted name list generated by main loading script
#then create an "$accepted_name_list" variable used later
my $distfile = "output/EFLORA_accepted_dist.txt";
my $problems = "output/problem_dist.txt";
my $synfile = "output/EFLORA_tax_syns_list.txt";
my $CCHsyns = "output/CCH2_EFLORA_synonyms.csv";
my $CCHacc = "output/CCH2_EFLORA_accepted.csv";
my $misapplied_file = "output/EFLORA_misapplied_list.txt";
my $file = "output/accepted_name_list.txt";
open(FILE, "< $file") or die "Can't open $file for read: $!";
my @names;
while (<FILE>) {
	push (@names, $_);
}
$accepted_name_list = join ('$|^',@names);
$accepted_name_list =~ s/\n//g;
$accepted_name_list =~ s/&times;/X /;
close FILE or die "Cannot close $file: $!";

open(IN, "< $file") or die "Can't open $file for read: $!";
while(<IN>){
	chomp;
($accepted2)=split(/\n/);
$accepted2 =~ s/&times;/X /;

	++$count_acc;
	$EF_ACC{$accepted2}++;

}
close(IN);

#this function indicates the record delimiter. In this case, an empty line
$/="";

open(OUT, ">output/load_synonymy_table.sql") || die;

#This file is made here and subsequently used by the yellow flagging process 
#and get_HCODES.sh to make the file needed for the distribution table
#thus this process needs to  be run twice, once to harvest new distributions
#then a second time once the new disttributions have been converted in get_HCODES.sh
open(DIST, ">$distfile") || die;
open(PROB, ">$problems") || die;

#synonymy files
open(SYN, ">$CCHsyns") || die;
open(ACC, ">$CCHacc") || die;
open(OUT2, ">$synfile") || die;
open(OUT3, ">$misapplied_file") || die;
open(ERR, ">output/duplicated_synonyms_report.txt") || die;

print SYN "family,parent,sciname,rankname,acceptedstr,source\n";
print ACC "family,parent,sciname,rankname,source\n";
print OUT2 "#synonym	accepted name\n";
print OUT2 "#Names extracted from the Notes field of the eFlora, many false positives, are culled from this output by make_synonymy_table.pl\n";
print OUT2 "#The following are synonyms of accepted names of CA species in eFlora, abridged and unabridged\n";

print DIST "#tid	EF_accepted_name	dist_string\n";
print PROB "#tid	EF_accepted_name	dist_string\n";
print OUT3 "#synonym	accepted name\n";
print OUT3 "#Names extracted from the Notes field of the eFlora, many false positives, are culled from this output by make_synonymy_table.pl\n";
print OUT3 "#The following are misapplied names with the eFlora accepted names\n";

###Loop through to load synonyms into the array, and print them to output
open(IN, "input/eflora_treatments.txt") || die;
while(<IN>){
     next if m/^#/; #skip lines that are commented out
     next if m/^Admin/;	#skip lines that start with Admin

#Escaping single quotes for SQL insert
	s/'/''/g;

	if(m/([A-Z]+ACEAE)/){ #when it encounters a CAPS string ending in ACEAE
		$family=$1; #that word is assigned to $family (until it gets reassigned)
		$family = ucfirst(lc($family));
	}

	

	my $temp_name = &get_taxon_name($_);
	my $bioregional_distribution=&get_bioregion($_);

$syn_string=&get_synonyms($_);
$unabridged_syn_string=&get_unabridged_synonyms($_);

#Process accepted names to match with accepted name list and TIDs
if ($temp_name =~ m/ENCELIA farinosa A\. Gray ex Torr\. &times; E\. frutescens/){ #the spontaneous hybrid is kluged because there is only one and it's awkward
	$taxon_name = "Encelia farinosa X frutescens";
}
else{

$temp_name=~s/&times;/X /;
$temp_name=ucfirst(lc($temp_name));
$taxon_name=&strip_nameEF($temp_name);
}

$CCH_taxon = $taxon_name;

		if ($CCH_taxon =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+/){
			$genus = $1;
		}
		elsif ($CCH_taxon =~ m/^([A-Z][a-z-]+) [a-z-]+ X /){
			$genus = $1;
		}
		elsif ($CCH_taxon =~ m/^(X? ?[A-Z][a-z-]+)$/){
			$genus = $CCH_taxon = $CCHrank = "GENUS SKIP";
		}
		else{
			if ($CCH_taxon !~ m/^ *$/){
				$genus = $CCH_taxon = $CCHrank = "";
			}
			elsif ($CCH_taxon !~ m/^(Caption:.+|[A-Z].+\(.+)/){
				$genus = $CCH_taxon = $CCHrank = "";
			}
			elsif ($CCH_taxon !~ m/^[0-9.'] +.+/){
				$genus = $CCH_taxon = $CCHrank = "";
			}
			else{
				print "MISSING (1) name for GENUS:$CCH_taxon\n";
				$genus = $CCH_taxon = $CCHrank = "";
			}
		}

		if ($CCH_taxon =~ m/ subsp. /){
			$CCHrank = "Subspecies";
		}
		elsif ($CCH_taxon =~ m/ var. /){
			$CCHrank = "Variety";
		}
		elsif ($CCH_taxon =~ m/ nothosubsp. /){
			$CCHrank = "Nothosubspecies";
		}
		elsif ($CCH_taxon =~ m/( f. | subvar. )/){#skip formae and subvar, may skip some filial names at this point, but this is a nominal omission
			$genus = $CCH_taxon = $CCHrank = "";
		}
		elsif ($CCH_taxon =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+$/){
			$CCHrank = "Species";
		}
		elsif ($CCH_taxon =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+ [(A-Z]+/){
			$CCHrank = "Species";
		}
		else{
			if ($CCH_taxon !~ m/^ *$/){
				$genus = $CCH_taxon = $CCHrank = "";
			}
			elsif ($CCH_taxon !~ m/^GENUS/){
				$genus = $CCH_taxon = $CCHrank = "";
			}
			else{
				print "Problem RANK (1)==>$CCH_taxon\n";
				$genus = $CCHrank = "";
			}
		}





if ($temp_name !~ m/^([A-Z][a-z]+aceae|[Nn][Uu][Ll]+|[A-Z][a-z]+aceae \(.+|\d.+|Caption:.+)$/){

	$taxon_id = $TID{$CCH_taxon};

	if ($CCH_taxon =~ m/Encelia farinosa X Encelia frutescens/){ #the spontaneous hybrid is kluged because there is only one and it's awkward
		$taxon_id = "100435";
	}


	unless ($EF_ACC{$taxon_name}){
		print "NAME does not match ACCEPTED LIST==>$taxon_name\n";
		print LOG "NAME does not match ACCEPTED LIST==>$taxon_name\n";
		$CCH_taxon = $taxon_name = "";
	}
	else{
		my %seenCCH;
		if ($CCH_taxon !~ m/^GENUS/){
			print ACC $family.",".$genus.",\"".$CCH_taxon."\",".$CCHrank.",Jepson eFlora-TJM2\n" unless $seenCCH{$CCH_taxon}++;


	unless ($taxon_id =~ m/^ *$/){
		my $test = $bioregional_distribution;
		$test =~ s/\'//g; #remove SQL delimiters if present
		$test =~ s/[.;]$//g; #remove end of line delimiters from original text file
			print DIST $taxon_id."\t".$CCH_taxon."\t".$test."\n";
	}



				if($bioregional_distribution =~ m/exc[ept]*\.?.+exc[ept]*\.?/){
					#PR (exc SnJt), MP (exc Wrn) Verbascum blattaria
					#Geranium carolinianum 26710
					#NW (exc NCoRH), CaR, SNF, c SNH, GV, CW (exc SCoRI), SW (exc WTR, SnJt), MP (exc Wrn)
					print PROB $taxon_id."\t".$CCH_taxon."\t".$bioregional_distribution."\n";
				}
				elsif($bioregional_distribution =~ m/ exc[ept]*\.? [&A-Za-z]+, [&A-Za-z]+,? ?.+[.;]/){
				
				#LINANTHUS bigelovii: BIOREGIONAL DISTRIBUTION: se SnFrB, SCoRI, WTR, SnGb (e edge), SnBr (e edge), SNE exc W&I, PR, D.
				#PR and D skipped in HCODE
				
					print PROB $taxon_id."\t".$CCH_taxon."\t".$bioregional_distribution."\n";
				
				}
				elsif($bioregional_distribution =~ m/\(exc[ept]*\.? [a-z]* ?[&A-Za-z]+, [a-z]* ?[&A-Za-z]+,? ?[a-z]* ? ?.+\)/){
				
				#:Asclepias fascicularis: BIOREGIONAL DISTRIBUTION: CA (exc NCo, n CCo)
				#CCo not skipped in HCODE
					print LOG $taxon_id."\t".$CCH_taxon."\t".$bioregional_distribution."\n";
					print $taxon_id."\t".$CCH_taxon."\t".$bioregional_distribution."\n";
				
				}
	
		}
	}
}



#No need to clean alternate names for families, since family treatments don't have synonyms

$name_for_matching = $taxon_name;
foreach ($name_for_matching){
	s/ \(.*\)//;
	
}
$taxon_id=$TID{$name_for_matching};
next unless $taxon_id;



#This is to remove some HTML entities which otherwise mess with the semicolon delimiting
#Those in author names don't matter since they are being stripped for searching
$syn_string=~s/&times;/X /g;
$syn_string=~s/&eacute;/e/g;
$unabridged_syn_string=~s/&times;/X /g;
$unabridged_syn_string=~s/&eacute;/e/g;

#Process synonyms as an array
@synonyms=split(/; /,$syn_string,100);


	if ($taxon_name !~ m/^([A-Z][a-z]+aceae|[A-Z][a-z]+)$/){
		print OUT2 "$taxon_name\t$taxon_name\tTJM2 accepted\n" unless $seen{$taxon_name}++;#add accepted names
	}

  foreach $syn (@synonyms){

		++$syn_total;
		#remove exceptional cases
		#Eriogonum luteolum (Coville) M.E. Jones is illegitimate, not to be confused with the legitimate Eriogonum luteolum Greene. Skip the illegitimate synonym
		#Eriogonum denudatum (Nutt.) Curran is illegitimate [=Nemacaulis denudata], not to be confused with the legitimate Eriogonum denudatum Nutt. which is a synonym of Eriogonum elongatum
		#Agoseris maritima Eastw. is illegitimate [=Agoseris apargioides var. eastwoodiae], not to be confused with the legitimate Agoseris maritima E. Sheld. which is a synonym of Agoseris apargioides var. maritima
		#Agrostis tenuis Vasey is illegitimate [=Agrostis idahoensis], not to be confused with the legitimate Agrostis tenuis Sibth. which is a synonym of Agrostis capillaris
	if ($syn =~ /^Leptosiphon aureus .+illeg/){
			$stripped ="Leptosiphon aureus (Nutt.) of various auth. non Benth.";

		print OUT2 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then skip the name so a dup is not in the file as a synonym
	next;
	}
	elsif ($syn =~ /^Agoseris maritima Eastw\./){
			$stripped ="Agoseris maritima Eastw. non E. Sheld.";

		print OUT2 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then skip the name so a dup is not in the file as a synonym
	next;
	}
	elsif ($syn =~ /^Eriogonum luteolum \(Coville\)/){
			$stripped ="Eriogonum luteolum \(Coville\) of auth. non Greene";

		print OUT2 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then skip the name so a dup is not in the file as a synonym
	next;
	}
	elsif ($syn =~ /^Agrostis tenuis Vasey/){
			$stripped = "Agrostis tenuis Vasey non Sibth.";

		print OUT2 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then skip the name so a dup is not in the file as a synonym
	next;
	}
	elsif ($syn =~ /^Eriogonum denudatum (Nutt.) Curran/){
			$stripped = "Eriogonum denudatum (Nutt.) Curran non Nutt.";

		print OUT2 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then skip the name so a dup is not in the file as a synonym
	next;
	}
	elsif ($syn =~ /^Cyanopsis$/){
			print ERR "exceptional case skipped for synonymy: $syn\n";
			next;
	}
		#make a note of the below problems for Tom
	elsif ($syn =~ /^(Lotus scoparius brevialatus \(Ottley\) Munz)/){
			$syn = "Lotus scoparius subsp. brevialatus (Ottley) Munz";
			print ERR "exceptional case modified from $1 for synonymy: $syn\n";
	}
	else{

	#remove cases where a name is not acually a synonym in the synonym field, it is a misapplied name or an "in part" name, we only want full synonyms here
	#these cases should be noted names instead.
	#this has to be done before stripping to preserve the phrase.
		$syn =~ s/\(\?\)//;#delete errant problematic '(?)' phrases authors add to eflora that cause problems with stripping names
		$syn =~ s/\?//;#delete errant problematic '?' authors add to eflora that cause problems with stripping names
		$stripped = &strip_nameEF($syn);
	
		if ($syn =~ m/ in part, mis.+/){ 
			print ERR "synonym is an 'in part, misapplied' name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_part;
		
			print OUT3 "$stripped\t$taxon_name\tSYN IN PART MISAPP in EFLORA\n"; 

		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'misapplied name, in part', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/ in part/){ 
			print ERR "synonym is an 'in part' name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_part;
			print OUT3 "$stripped\t$taxon_name\tSYN IN PART in EFLORA\n"; 

		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'synonym, in part', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/( misappl)/){ 
			print ERR "synonym is a misapplied name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_misap;
			
			#the eflora accepted name cannot be used here as the accepted name since it is misapplied
			print OUT3 "$stripped\t$stripped\tMISAPPL sensu EFLORA under $taxon_name\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'misapplied name', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
		next;
		}	
		elsif ($syn =~ m/ nom\. inval\./){ 
			print ERR "synonym is a nom\. inval\. name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_inval;
			print OUT3 "$stripped\t$taxon_name\tINVALID in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'invalid name', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/ illeg\./){ 
			print ERR "synonym is a Illegitimate name: $syn\n";
			print OUT2 "$stripped\t$taxon_name\tTJM2 synonym, illeg.\n"; #need to print these variants to EFLORA_tax_syns_list.txt
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_illeg;
			print OUT3 "$stripped\t$taxon_name\tILLEG in EFLORA\n"; 

		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'illegitimate name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/ superfl\./){ 
			print ERR "synonym is a Superfluous name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_super;
			print OUT3 "$stripped\t$taxon_name\tSUPERFL in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'superfluous name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/ ined\./){ 
			print ERR "synonym is a 'ined' name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_ined;
			print OUT3 "$stripped\t$taxon_name\tINED in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'synonym ined.', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/ orth\.? var\.?/){ 
			print ERR "synonym is a Orth Var name: $syn\n";

			print OUT2 "$stripped\t$taxon_name\tTJM2 synonym, orth. var.\n"; #need to print these variants to EFLORA_tax_syns_list.txt

			#convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_orth;
			print OUT3 "$stripped\t$taxon_name\tORTH VAR in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'orthographic variant', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/( of authors| of pre-2004| auct\.? non )/){ 
			print ERR "synonym is a alternate noted name: $syn\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_altnote;
			print OUT3 "$stripped\t$taxon_name\tALT NOTED in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'noted name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		elsif ($syn =~ m/  nom\.? nud\.?/){ 
			print ERR "synonym is a nomen nudum: $stripped\n";
			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;
			++$syn_nud;
			print OUT3 "$stripped\t$taxon_name\tNOM NUD in EFLORA\n"; 
			 
		print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'Nomen Nudum', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
		next;
		}
		else{
#process the rest as per normal
			
			if($seen{"$stripped\t$taxon_id"}++){
				++$syn_dups;
				print ERR "synonym repeated within the same entry: $stripped\t$taxon_id\n";
				print "synonym repeated within the same entry: $stripped\t$taxon_id\n";
				next;
			}
			elsif ($stripped =~ /^$accepted_name_list$/){
				print ERR "synonym is an accepted name: $stripped\n";
				next;
			}
			else{
					foreach ($stripped){ #ICPN has some inconsistencies like authors on genus names and other notations that cause problems with strip name, fix these
						#these show up only as a warning in terminal
						s/, Modoc cypress|, Siskiyou cypress//; #delete common name entered into Synonym line
						#s/, illeg\.?//; #delete illeg phrase entered into Synonym line
						#s/, ined\.?//; #delete ined phrase entered into Synonym line
						#s/, orth\.? var\.?//; #delete orthographic phrase entered into Synonym line
						#s/, nom\.? nud\.?//; #delete nomen nudum phrase entered into Synonym line
						s/  +/ /;
						s/ +$//;
						s/^ +//;
					}
					
					foreach ($syn){ #ICPN has some inconsistencies like authors on genus names and other notations that cause problems with strip name, fix these
						#these show up only as a warning in terminal
						s/, Modoc cypress|, Siskiyou cypress//; #delete common name entered into Synonym line
						#s/, illeg\.?//; #delete illeg phrase entered into Synonym line
						#s/, ined\.?//; #delete ined phrase entered into Synonym line
						#s/, orth\.? var\.?//; #delete orthographic phrase entered into Synonym line
						#s/, nom\.? nud\.?//; #delete nomen nudum phrase entered into Synonym line
						#s/ of pre-2004 California authors, non / /;
						#s/( of authors|auct\.? non )/ /;
						s/  +/ /;
						s/ +$//;
						s/^ +//;
						s/&times;/X /;
					}
					
						unless($TID{$stripped}){
							warn "$.-->no code for $syn ==> stripped as $stripped\n";
							print LOG "$.-->no code for $syn ==> stripped as $stripped\n";
						}



#Load the synonym name and the accepted name TID into ScientificName and AcceptedNameTID in the eflora_taxa table
#By virtue of having an AcceptedTaxonTID, the webapps know they are not accepted names
#The Status column is used to differentiate synonyms from noted names

#these below require some changes in eflora text for some synonyms to map correctly; these are mostly inconsistencies due to human error or oversights that might be fixed in later revisions

#Orthocarpus erianthus	Triphysaria eriantha subsp. eriantha	TJM2
		if ($stripped =~ m/^Orthocarpus erianthus$/){
			$taxon_name = "Triphysaria eriantha";#not Triphysaria eriantha subsp. eriantha as in EFLORA
		}
		if ($stripped =~ m/^Orthocarpus erianthus var. gratiosus$/){
			$taxon_name = "Triphysaria eriantha subsp. eriantha";#the above change seems to have broken the correct accepted name for this name
		}




#print OUT2 "$stripped\t$taxon_name\tTJM2\n";

			if ($syn =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+/){
				$genus = $1;
			}
			else{
				print "MISSING (2) name for GENUS:$syn\n";
				print LOG "MISSING (2) name for GENUS:$syn\n";
			}

			if ($syn =~ m/ subsp. /){
				$CCHrank = "Subspecies";
			}
			elsif ($syn =~ m/ var. /){
				$CCHrank = "Variety";
			}
			elsif ($syn =~ m/ nothosubsp. /){
				$CCHrank = "Nothosubspecies";
			}
			elsif ($syn =~ m/( f. | subvar. )/){#skip formae and subvar, may skip some filial names at this point, but this is a nominal omission
				$CCH_taxon = $syn = $CCHrank = "";
			}
			elsif ($syn =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+$/){
				$CCHrank = "Species";
			}
			elsif ($syn =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+ [(A-Z]+/){
				$CCHrank = "Species";
			}
			else{
				print "Problem RANK (2b)==>$syn\n";
				print LOG "Problem RANK (2b)==>$syn\n";
				$CCH_taxon = $CCHrank = "";
				next;
			}
		
		if ($stripped !~ m/(Eriogonum luteolum|Convolvulus malacophyllus subsp. collinus|Orthocarpus purpurascens)/){
			print OUT2 "$stripped\t$taxon_name\tTJM2\n";
			
			$syn =~ s/^([A-Z][a-z-]+) ([-a-z]+) .* (nothosubsp.|subsp\.|var\.) ([-a-z]+.*)/$1 $2 $3 $4/;
			
			print SYN $family.",".$genus.",\"".$syn."\",".$CCHrank.",".$CCH_taxon.",Jepson eFlora-TJM2\n" unless $CCH_taxon =~ m/^ *$/;
		}
		

			 #convert hybrid X to html
			 $stripped=~s/X /&times;/;

print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$stripped', 'Synonym', $taxon_id)
;

EOP

			}
		}

	}
  }
#don't print outside this loop, otherwise you get one line per accepted taxon and not one per synonym

#Process synonyms as an array
@unabridgedsynonyms=split(/; /,$unabridged_syn_string,100);

foreach $unabsyn (@unabridgedsynonyms){

		++$unabsyn_total;

		#remove exceptional cases
		#Eriogonum luteolum (Coville) M.E. Jones is ilegitimate, not to be confused with the legitimate Eriogonum luteolum Greene. Skip the illegitimate synonym
		#Eriogonum denudatum (Nutt.) Curran is ilegitimate [=Nemacaulis denudata], not to be confused with the legitimate Eriogonum denudatum Nutt. which is a synonym of Eriogonum elongatum
		#Agoseris maritima Eastw. is illegitimate [=Agoseris apargioides var. eastwoodiae], not to be confused with the legitimate Agoseris maritima E. Sheld. which is a synonym of Agoseris apargioides var. maritima
		#Agrostis tenuis Vasey is illegitimate [=Agrostis idahoensis], not to be confused with the legitimate Agrostis tenuis Sibth. which is a synonym of Agrostis capillaris

		if ($unabsyn =~ /^(Agrostis tenuis Vasey|Agoseris maritima Eastw|Eriogonum luteolum \(Coville\) M\.E\. Jones|Eriogonum denudatum \(Nutt\.\) Curran)/){
			print ERR "exceptional case skipped for synonymy: $unabsyn\n";
			next;
		}
		elsif ($unabsyn =~ /^Cyanopsis$/){
			print ERR "exceptional case skipped for synonymy: $unabsyn\n";
			next;
		}
		elsif ($unabsyn =~ /not (Juncus nodatus Coville)/){
			print ERR "exceptional case modified as $1 for synonymy: $unabsyn\n";
			$unabsyn = "Juncus nodatus Coville, misappl."; #change 'not' to 'misappl' so that is become a noted name and not a synonym
		}
		elsif ($unabsyn =~ /probably (Opuntia mojavensis) Engelm.+/){# probably Opuntia mojavensis Engelm. & J.M. Bigelow
			print ERR "exceptional case modified as $1 for synonymy: $unabsyn\n";
			$unabsyn = "Opuntia mojavensis Engelm. & J.M. Bigelow, probably";
		}
		elsif ($unabsyn =~ /Polygonum sect\. Aconogonon Meisn/){
			print ERR "exceptional case skipped for synonymy: $unabsyn\n";
			next;
		}
		elsif ($unabsyn =~ /Arenaria subg\. Eremogon/){
			print ERR "exceptional case skipped for synonymy: $unabsyn\n";
			next;
		}
		else{

	#remove cases where a name is not acually a synonym in the synonym field, it is a misapplied name or an "in part" name, we only want full synonyms here
	#these cases should be noted names instead.
	#this has to be done before stripping to preserve the phrase.

	$unabsyn =~ s/\(\?\)//;#delete errant problematic '(?)' phrases authors add to eflora that cause problems with stripping names
	$unabsyn =~ s/\?//;#delete errant problematic '?' authors add to eflora that cause problems with stripping names
	$unabstripped = &strip_nameEF($unabsyn); #strip the name

	if ($unabsyn =~ m/ in part, mis.+/){ 
		print ERR "synonym is an 'in part, misapplied' name: $unabsyn\n";
		 #convert hybrid X to html
		 $stripped=~s/X /&times;/;
		++$syn_part;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR SYN IN PART MISAPP in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'Misapplied Name, in part', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ in part/){ 
		print ERR "synonym is an 'in part' name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_part;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR IN PART in EFLORA\n"; 
		
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'Unabridged Synonym, in part', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ misappl/){ 
		print ERR "synonym is a misapplied name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_misap;

		#the eflora accepted name cannot be used here as the accepted name since it is misapplied
		print OUT3 "$unabstripped\t$unabstripped\tUNABR MISAPPL sensu EFLORA under $taxon_name\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'unabridged misapplied name', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
	next;
	}	
	elsif ($unabsyn =~ m/ nom\. inval\./){ 
		print ERR "synonym is a nom\. inval\. name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_inval;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR INVALID in EFLORA\n"; 
		 
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'invalid name', $taxon_id)
;

EOP
#then skip the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ illeg\./){ 
		print ERR "synonym is a Illegitimate name: $unabsyn\n";
		print OUT2 "$unabstripped\t$taxon_name\tunabridged, illeg.\n"; #need to print these variants to EFLORA_tax_syns_list.txt
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_illeg;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR ILLEG in EFLORA\n"; 
				
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'illegitimate name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ superfl\./){ 
		print ERR "synonym is a Superfluous name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_super;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR SUPERFL in EFLORA\n"; 
		 
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'superfluous name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ ined\./){ 
		print ERR "synonym is a 'ined' name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_ined;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR INED in EFLORA\n"; 
		 
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'synonym ined.', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/ orth\.? var\.?/){ 
		print ERR "synonym is a Orth Var name: $unabsyn\n";
		print OUT2 "$unabstripped\t$taxon_name\tunabridged, orth. var.\n"; #need to print these variants to EFLORA_tax_syns_list.txt
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_orth;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR ORTH VAR in EFLORA\n"; 

	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'orthographic variant', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/( of authors| of pre-2004| auct\.? non | probably)/){ 
		print ERR "synonym is a alternate noted name: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_altnote;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR ALT NOTED in EFLORA\n"; 
		 
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'noted name', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	elsif ($unabsyn =~ m/  nom\.? nud\.?/){ 
		print ERR "synonym is a nomen nudum: $unabsyn\n";
		 #convert hybrid X to html
		$unabstripped=~s/X /&times;/;
		++$unabsyn_nud;
		print OUT3 "$unabstripped\t$taxon_name\tUNABR NOM NUD in EFLORA\n"; 
		 
	print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'Nomen Nudum', $taxon_id)
;

EOP
#then null the name so it is not in the file as a synonym
	next;
	}
	else{
#process the rest as per normal
	
	if($seen_unab{"$unabstripped\t$taxon_id"}++){
		++$skipped{one};
		print ERR "synonym repeated within the same entry: $unabsyn\n";
		next;
	}
	elsif ($unabstripped =~ /^$accepted_name_list$/){
		print ERR "synonym is an accepted name: $unabsyn\n";
	}
	else{
				foreach ($unabstripped){ #ICPN has some inconsistencies like authors on genus names and other notations that cause problems with strip name, fix these
					s/  +/ /;
					s/ +$//;
					s/^ +//;
				}
				
				foreach ($unabsyn){ #ICPN has some inconsistencies like authors on genus names and other notations that cause problems with strip name, fix these
					s/  +/ /;
					s/ +$//;
					s/^ +//;
					s/&times;/X /;
				}
				
					unless($TID{$unabstripped}){
						warn "$.-->no code for $unabsyn ==> stripped as $unabstripped\n";
						print LOG "$.-->no code for $unabsyn ==> stripped as $unabstripped\n";
					}
#Load the synonym name and the accepted name TID into ScientificName and AcceptedNameTID in the eflora_taxa table
#By virtue of having an AcceptedTaxonTID, the webapps know they are not accepted names
#The Status column is used to differentiate synonyms from noted names



#Orthocarpus purpurascens	Castilleja exserta subsp. exserta	TJM2
#the synonymy for Orthocarpus purpurascens is in eflora twice under two accepted names Castilleja exserta subsp. exserta and Castilleja exserta, so this is a problem that is skipped above
#Montia perfoliata	Claytonia perfoliata subsp. perfoliata	TJM2
#this conflicts with other synonymy for just Calytonia perfoliata, this should be Montia perfoliata subp. perfoliata

		if ($unabstripped =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+/){
			$genus = $1;
		}
		else{
			print "MISSING (3) name for GENUS:$unabstripped\n";
			print LOG "MISSING (3) name for GENUS:$unabstripped\n";
		}

		if ($unabsyn =~ m/ subsp. /){
			$CCHrank = "Subspecies";
		}
		elsif ($unabsyn =~ m/ var. /){
			$CCHrank = "Variety";
		}
		elsif ($unabsyn =~ m/ nothosubsp. /){
			$genus = $CCHrank = "Nothosubspecies";
		}
		elsif ($unabsyn =~ m/( f. | subvar. )/){#skip formae and subvar, may skip some filial names at this point, but this is a nominal omission
			$CCH_taxon = $unabsyn = $CCHrank = "";
		}
		elsif ($unabsyn =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+$/){
			$CCHrank = "Species";
		}
		elsif ($unabsyn =~ m/^(X? ?[A-Z][a-z-]+) X? ?[a-z-]+ [(A-Z]+/){
			$CCHrank = "Species";
		}
		else{
			print "Problem RANK (3b)==>$unabsyn\n";
			print LOG "Problem RANK (3b)==>$unabsyn\n";
			$CCH_taxon = $unabsyn = $CCHrank = "";
		}

#Setaria glauca is excluded herein as the synonym Pennisetum glaucum is an accepted name in ICPN as a waif, with Setaria glauca stated as misapplied.
#However setaria glauca is listed as a synomym of Setaria pumila in the eFlora.
#Scirpus tuberosus is excluded herein since the accepted name is not Scirpus tuberosus outside CA, it should be one the genus Bolboschoenus
	if ($unabstripped !~ m/(Setaria glauca|Convolvulus malacophyllus subsp. collinus|Orthocarpus purpurascens|Eriogonum luteolum)/){
		print OUT2 "$unabstripped\t$taxon_name\tunabridged\n";
		
		$unabsyn =~ s/^([A-Z][a-z-]+) ([-a-z]+) .* (nothosubsp.|subsp\.|var\.) ([-a-z]+.*)/$1 $2 $3 $4/;

		print SYN $family.",".$genus.",\"".$unabsyn."\",".$CCHrank.",".$CCH_taxon.",Jepson eFlora-TJM2\n" unless $CCH_taxon =~ m/^ *$/;
		
	}
	
		 #convert hybrid X to html
		 $unabstripped=~s/X /&times;/;

print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$unabstripped', 'Synonym', $taxon_id)
;

EOP
	}

	}

		}
}
#don't print outside this loop, otherwise you get one line per accepted taxon and not one per synonym

++$count_record;
warn "$count_record\n" unless $count_record % 100;

if(m/NOTE:.*_/){
#OUT2 file is not printed to in this loop because these are just mentioned names and not true synonyms.
				s/&times;/X /;

				while(s/_([A-Z][a-z-]+ [a-z-]+)_[^_]+(var\.|subsp\.|nothosubsp\.|f\.) _([a-z-]+)_//){ #underscores (italics indicators) are used to identify names in the notes fields
					$noted_name = "$1 $2 $3";
					$noted_name =~ s/ *$//;
					if ($noted_name =~ /^$accepted_name_list$/){
						print ERR "noted name is an accepted name: $noted_name\n";
					}
					elsif($seen{"$noted_name\t$taxon_id"}++){
						++$skipped{one};
						print ERR "noted name repeated within the same entry: $noted_name\n";
						next;
					}
					else{

		 				#convert hybrid X to html
		 				$noted_name=~s/X /&times;/;
						++$countNoted;
print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$noted_name', 'Noted Name', $taxon_id)
;

EOP
					}#don't print outside this loop, otherwise you get one line per accepted taxon and not one per synonym
				}

				while(s/_([A-Z][a-z-]+ [a-z-]+)_//){ #then grab the binomial names from the notes fields.
					$noted_name = "$1";
					if ($noted_name =~ /^$accepted_name_list$/){
						print ERR "noted name is an accepted name: $noted_name\n";
					}
					elsif($seen{"$noted_name\t$taxon_id"}++){
						++$skipped{one};
						print ERR "noted name repeated within the same entry: $noted_name\n";
						next;
					}
					else{
					
						#convert hybrid X to html
		 				$noted_name=~s/X /&times;/;
		 				++$countNoted;
print OUT <<EOP;
INSERT INTO eflora_taxa(ScientificName, Status, AcceptedNameTID)
VALUES('$noted_name', 'Noted Name', $taxon_id)
;

EOP
					}
				}
			}
#don't print outside this loop, otherwise you get one line per accepted taxon and not one per synonym
}

print OUT2 "Montia perfoliata	Claytonia perfoliata	unabridged\n";#a skipped problem name that needs re-added
print OUT2 "Orthocarpus purpurascens	Castilleja exserta subsp. exserta	TJM2\n";#a skipped problem name that needs re-added
print OUT2 "Convolvulus malacophyllus subsp. collinus	Calystegia collina subsp. collina	unabridged\n";#a skipped problem name that needs re-added
print OUT2 "Phacelia imbricata subsp. imbricata\tPhacelia imbricata var. imbricata\tTJM2\n"; #a skipped name that needs added
print SYN "Boraginaceae,Phacelia,Phacelia imbricata subsp. imbricata,Subspecies,Phacelia imbricata var. imbricata,Jepson eFlora-TJM2\n";

print LOG <<EOP;

Normal Text
"in part" found in Synonym Line: $syn_part
"misappl" found in Synonym Line: $syn_misap
"invalid" found in Synonym Line: $syn_inval
"illeg" found in Synonym Line: $syn_illeg
"superfl" found in Synonym Line: $syn_super
"ined" found in Synonym Line: $syn_ined
"orth var" found in Synonym Line: $syn_orth
"nom nud" found in Synonym Line: $syn_nud
Alternate Noted Name form in Synonym Line: $syn_altnote

Unabridged 
"in part" found in Unabridged Synonym Line: $unabsyn_part
"misappl" found in Unabridged Synonym Line: $unabsyn_misap
"invalid" found in Unabridged Synonym Line: $unabsyn_inval
"illeg" found in Unabridged Synonym Line: $unabsyn_illeg
"superfl" found in Unabridged Synonym Line: $unabsyn_super
"ined" found in Unabridged Synonym Line: $unabsyn_ined
"orth var" found in Unabridged Synonym Line: $unabsyn_orth
"nom nud" found in Unabridged Synonym Line: $unabsyn_nud
Alternate Noted Name form in Unabridged Synonym Line: $unabsyn_altnote

EOP


print LOG <<EOP;
BEGIN EFLORA SYN STATS

TOTAL accepted names found in eflora_treatments: $count_acc

duplicates found in Synonym Line: $syn_dups
Total names in Synonym line: $syn_total
Total Name in Notes Line: $countNoted

duplicates found in Unabridged Synonym Line: $unabsyn_dups
Total names in Unabridged Synonym line: $unabsyn_total

END EFLORA SYN STATS
EOP

print <<EOP;
TOTAL accepted names found in eflora_treatments: $count_acc

duplicates found in Synonym Line: $syn_dups
Total names in Synonym line: $syn_total
Total Name in Notes Line: $countNoted

duplicates found in Unabridged Synonym Line: $unabsyn_dups
Total names in Unabridged Synonym line: $unabsyn_total

END EFLORA SYN STATS
EOP

close (IN);
close (OUT);
close (DIST);
close (PROB);
close (SYN);
close (ACC);
close (OUT2);
close (OUT3);
close (ERR);

############################

sub get_taxon_name {
    my $par = shift; #each paragraph is separated by a blank line
    @lines=split(/\n/,$par); #the array of lines within a paragraph are values separated by a new line
    if( $lines[0]=~/^WAIF/){ #if the first line starts with...
        return $lines[1]; #the name is what's on the second line
    }
	elsif($lines[1]=~/^(POSSIBLY IN CA|CULTIVATED|WAIF|EXTIRPATED|HISTORICAL|SPONTANEOUS|AGRICULTURAL|GARDEN|URBAN)/){
        return $lines[2]; #elsif the second line starts with any of the above values, the name is what's on the third line
    }
    elsif( $lines[0]=~/^(NATIVE|NATURALIZED)/){ #if the first line starts with...
        return $lines[1]; #the name is the contents of the second line
    }
    elsif($lines[0]=~/^UNABRIDGED/){ #elsif the first line starts contains "UNABRIDGED"
        return $lines[1]; #the name is what's on the second line
    }
    elsif( $lines[0]=~/^[A-Z][A-Z][A-Z]/){ #elsif the first line starts with three capital letters...
        return $lines[0] #the name is what's on the first line
    }
    else{ #otherwise...
        return "NULL"; #don't return anything for that paragraph
    }
}


sub get_synonyms {
		my $par = shift;
		if($par =~ /([\H])SYNONYMS: *(.+)/){
			return "$2";
		}
		else {
			return "";
		}
}

sub get_unabridged_synonyms {
		my $par = shift;
		if($par =~ /([\H])UNABRIDGED SYNONYMS: *(.+)/){
			return "$2";
		}
		else {
			return "";
		}
}

sub get_bioregion {
		my $par = shift;
		if($par=~/\HUNABRIDGED BIOREGIONAL DISTRIBUTION: *(.+)/){ 
		#select unabridged distribution line when present, theoretically this should have everything that the normal BIO DIST line has
		#there is currently only one case of this and it has same regions on both lines
			return "$1";
		}
		elsif($par=~/\HBIOREGIONAL DISTRIBUTION: *(.+)/){
			return "$1";
		}
		else{
		return "NULL";
		}
}

sub strip_nameEF{
local($_) = @_;


#encelioides (Cav.) Benth. & Hook. f. ex A. Gray subsp. exauriculata
s/Hook\. f\. ex A\. Gray/Hook. filius ex A. Gray/i;

s/"//g;
$_=ucfirst($_);

s/\?//g;

#s/Uva-Ursi pechoensis.*/Uva-Ursi pechoensis/;
s/ spp\./ subsp./;
s/ssp\./subsp./;
s/ ssp / subsp. /;
s/ subsp / subsp. /;
s/ var / var. /;
s/ var. $//;
s/ sp\..*//;
s/ sp .*//;
s/ ?[Uu]ndet\.?.*//;
s/ ?[Ii]ndet\.?.*//;
s/  +/ /g;
s/^ +//;
s/ +$//;

s/ aff\. / /;
s/ cf\. / /;
s/ c\. *f\.? / /;

#add additional 'filial' authorities at this point so they parse correctly, JAA
s/Ait\. f\./Ait. filius/g;
s/Backh\. f\./Backh. filius/g;
s/Baker f\./Baker filius/g;
s/Bakh\. f\./Bakh. filius/g;
s/Balf\. f\./Balf. filius/g;
s/Burm\. f\./Burm. filius/g;
s/Brunner,? f\./Brunner filius/g;
s/Celakovsky f\./L.F. Celak./g;
s/Delar\. f\./Delar. filius/g;
s/Forst\. f\./Forst. filius/g;
s/Gaertn\. f\./Gaertn. filius/g;
s/Gagnaire f\./Gagnaire filius/g;
s/Haage f\./Haage filius/g;
s/Haller f\./Haller filius/g;
s/Hallier f\./Hallier filius/g;
s/Harr\. f\./Harr. filius/g;
s/Hedw\. f\./Hedw. filius/g;
s/Hirats\. f\./Hirats. filius/g;
s/Hook\. f\./Hook. filius/g;
s/Hooker f\./Hooker filius/g; #some people dont abbreviate Hooker
s/Jacq\. f\./Jacq. filius/g;
s/Kickx f\./Kickx filius/g;
s/Kampm\. f\./Kampm. filius/g;
s/Keng f\./Keng filius/g;
s/Klokov f\./Klokov filius/g;
#s/L\. f\. sulcat/f. sulcat/g;

s/L\. f\. var./L. filius var./g;
s/L\. f\. subsp./L. filius subsp./g;
s/L\. f\./L. filius/g;
s/L\. *filius azure/L. f. azure/g; #fix special cases where L. f. is a forma name not filius, Anagallis arvensis L. f. azurea Hyl.
s/L\. *filius vine/L. f. vine/g; #fix special cases where L. f. is a forma name not filius, Allium vineale L. f. vineale
s/L\. *filius comp/L. f. comp/g; #fix special cases where L. f. is a forma name not filius, Allium vineale L. f. compactum L.
s/L\. *filius tome/L. f. tome/g; #fix special cases where L. f. is a forma name not filius, Acer rubrum L. f. tomemtosum L. 
s/L\. *filius sang/L. f. sang/g; #fix special cases where L. f. is a forma name not filius, Acer negundo L. f. sanguineum L. Martin
s/L\. *filius masc/L. f. masc/g; #fix special cases where L. f. is a forma name not filius, Orchis morio L. f. mascula L.
s/L\. *filius lute/L. f. lute/g; #fix special cases where L. f. is a forma name not filius, Ophrys insectifera L. f. luteomarginata L. Lewis
s/L\. *filius micr/L. f. micr/g; #fix special cases where L. f. is a forma name not filius, Jasminum humile L. f. microphyllum L.C. Chia
s/L\. *filius sask/L. f. sask/g; #fix special cases where L. f. is a forma name not filius, Carex capillaris L. f. saskatschewana (Boeckeler) L.H. Bailey
s/L\. *filius negl/L. f. negl/g; #fix special cases where L. f. is a forma name not filius, Celtis occidentalis L. f. neglecta L.
s/L\. *filius duri/L. f. duri/g; #fix special cases where L. f. is a forma name not filius, Eryngium campestre L. f. duriberum L.
s/L\. *filius glab/L. f. glab/g; #fix special cases where L. f. is a forma name not filius, Dioscorea villosa L. f. glabrata L.
s/L\. *filius prae/L. f. prae/g; #fix special cases where L. f. is a forma name not filius, Silphium trifoliatum L. f. praecisum L.M. Perry
s/L\. *filius pinn/L. f. pinn/g; #fix special cases where L. f. is a forma name not filius, Quercus alba L. f. pinntifida L.
s/L\. *filius sulc/L. f. sulc/g; #fix special cases where L. f. is a forma name not filius, Zostera marina L. f. sulcatifolia Setchell
s/L\. *filius pinn/L. f. vill/g; #fix special cases where L. f. is a forma name not filius, Cardiospermum corindum L. f. villosum (Mill.) Radlk
s/Lestib\. f\./Lestib. filius/g;
s/Lindb\. f\./Lindb. filius/g;
s/Lindm\. f\./Lindm. filius/g;
s/Luer f\./Luer filius/g;
s/Michx\. f\./F. Michx./g;
s/Michaux f\./F. Michx./g;
s/Occhioni f\./Occhioni filius/g;
s/Pearsall f\./Pearsall filius/g;
s/Phil\. f\./Phil. filius/g;
s/Rchb\. f\./Rchb. filius/g;
s/Rech\. f\./Rech. filius/g;
s/Rehb\. f\./Rehb. filius/g;
s/Reichenb\. f\./Reichenb. filius/g;
s/Reichenbach f\./Reichenbach filius/g;
s/Scheuchzer f\./Scheuchzer filius/g;
s/Schultes f\./Schultes filius/g;
s/Schult\. f\./Schult. filius/g;
s/Wallr\. f\./Wallr. filius/g;
s/Wendl\. f\./Wendl. filius/g;



#s/^([A-Z][A-Za-z]+) (X?[-a-z]+).*? (subvar\.|subsp\.|ssp\.|var\.|subvar\.|f\.|nothosubsp\.) ([-a-z]+).*/$1 $2 $3 $4/ ||
#s/^([A-Z][A-Za-z]+) X ([-a-z]+) .+/$1 X $2/||
#s/^([A-Z][A-Za-z]+) × ?([-a-z]+) .+/$1 X $2/||
#s/^([A-Z][A-Za-z]+) × ?([-a-z]+)/$1 X $2/||
#s/^([A-Z][A-Za-z]+) (X?[-a-z]+) .+/$1 $2/||
#s/^([A-Z][A-Za-z]+) (indet\.|sp\.)/$1 indet./||
#s/^([A-Z][A-Za-z]+) (X?[-a-z]+)/$1 $2/||
#s/^([A-Z][A-Za-z]+) (X [-a-z]+)/$1 $2/||
#s/^X (A-Z][a-z]+) ([-a-z]+) (.+)/X $2 $3/||
#s/^([A-Z][A-Za-z]+) (.+)/$1/;
#s/ssp\./subsp./;
#s/ +$//;

s/^([A-Z][A-Za-z-]+) ([-a-z]+) .* (subvar\.|subsp\.|var\.|f\.|nothosubsp\.) ([-a-z]+) .*/$1 $2 $3 $4/ ||
s/^([A-Z][A-Za-z-]+) ([-a-z]+) .* (subvar\.|subsp\.|var\.|f\.|nothosubsp\.) ([-a-z]+)/$1 $2 $3 $4/ ||
s/^([A-Z][A-Za-z-]+) ([-a-z]+) (subvar\.|subsp\.|var\.|f\.|nothosubsp\.) ([-a-z]+) .*/$1 $2 $3 $4/ ||
s/^([A-Z][A-Za-z-]+) ([-a-z]+) (subvar\.|subsp\.|var\.|f\.|nothosubsp\.) ([-a-z]+)/$1 $2 $3 $4/ ||
s/^([A-Z][A-Za-z-]+) [×Xx] ([-a-z]+) .+/$1 X $2/||
s/^([A-Z][A-Za-z-]+) [×Xx] ([-a-z]+)/$1 X $2/||
s/^([A-Z][A-Za-z-]+) ×([-a-z]+) .+/$1 X $2/||
s/^([A-Z][A-Za-z-]+) ×([-a-z]+)/$1 X $2/||
s/^([A-Z][A-Za-z-]+) ([-a-z]+) .+/$1 $2/||
s/^([A-Z][A-Za-z-]+) ([-a-z]+)/$1 $2/||
s/^([A-Z][A-Za-z-]+) (X [-a-z]+)/$1 $2/||
s/^X ([A-Z][a-z-]+) ([-a-z]+) (.+)/X $1 $2/||
s/^X ([A-Z][a-z-]+) ([-a-z]+)/X $1 $2/||
s/  +/ /;
s/ +$//;


s/,.+$//; #delete misappl. orth. var. etc artifacts from names

#print "$_ \n";
$_;
}